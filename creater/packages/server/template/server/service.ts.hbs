import { prisma, BaseService, PageData, Result } from '@/share'
import { Many, Page } from '@/type'
import { base } from '@/utils'
import { {{module}}Entity, type {{upper module}} } from './model'

export class {{upper module}}Service extends BaseService {
  constructor() {
    super()
  }
  // 新增
  async add({{module}}: {{upper module}}) {
    const result = new Result()
    const data = base.toEntity({{module}}, {{module}}Entity, true)
    data.createId = this.getUid()
    data.createTime = new Date()
    data.id = base.createUid()
    const row = await prisma.{{module}}.create({ data })
    if (row) {
      result.success({ msg: '{{tableComment}}新增成功' })
    } else {
      result.fail('{{tableComment}}新增失败')
    }
    return result
  }
  // 更新
  async update({{module}}: {{upper module}}) {
    const result = new Result<{{upper module}}>()
    const data = base.toEntity({{module}}, {{module}}Entity) as {{upper module}}
    data.updateId = this.getUid()
    data.updateTime = new Date()
    const row = await prisma.{{module}}.update({
      data,
      where: { id: {{module}}.id }
    })
    if (row) {
      result.success({ msg: '{{tableComment}}更新成功' })
    } else {
      result.fail('{{tableComment}}更新失败')
    }
    return result
  }
  // 删除
  async delete(id: string) {
    const result = new Result()
    const row = await prisma.{{module}}.delete({ where: { id } })
    if (row) {
      result.success({ msg: '{{tableComment}}删除成功' })
    } else {
      result.fail('{{tableComment}}删除失败')
    }
    return result
  }
  // 批量删除
  async deletes(params: Many<{{upper module}}>) {
    const result = new Result()
    const where = base.manyWhere(params, {{module}}Entity)
    const row = await prisma.{{module}}.deleteMany({ where })
    if (row.count) {
      result.success({ msg: '{{tableComment}}批量删除成功' })
    } else {
      result.fail('{{tableComment}}批量删除失败')
    }
    return result
  }
  // 详情
  async detail(id: string) {
    const result = new Result<{{upper module}}>()
    const row = await prisma.{{module}}.findUnique({
      select: base.toSelect({{module}}Entity),
      where: { id }
    })
    if (row) {
      result.row = row
      result.success({ msg: '{{tableComment}}查询成功' })
    } else {
      result.fail('{{tableComment}}查询失败')
    }
    return result
  }
  // 列表
  async list({{module}}: {{upper module}}, page: Page) {
    const pageData = new PageData<{{upper module}}>()
    const result = new Result<typeof pageData>()
    const rows = await prisma.{{module}}.findMany({
      ...base.pageHelper(page, 'desc'),
      select: base.toSelect({{module}}Entity),
      where: {{module}}
    })
    const total = await prisma.{{module}}.count({ where: {{module}} })
    pageData.list = rows
    pageData.total = total
    result.success({ data: pageData, msg: '{{tableComment}}列表查询成功' })
    return result
  }
}
